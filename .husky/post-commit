# Cross-platform TTY check
if [ -e "/dev/tty" ]; then
  TTY_OUTPUT="/dev/tty"
else
  TTY_OUTPUT="/dev/stdout"
fi

# Display commit information in Git's original format
commit_hash=$(git rev-parse --short HEAD)
commit_message=$(git log -1 --pretty=format:"%s")
branch=$(git symbolic-ref --short HEAD 2>/dev/null)

# Show Git-style commit output to TTY
echo "[$branch $commit_hash] $commit_message" > "$TTY_OUTPUT"
git show --stat --format="" HEAD > "$TTY_OUTPUT"

echo "" > "$TTY_OUTPUT"
echo "✓ Commit complete" > "$TTY_OUTPUT"
echo "────────────────────────────────────────" > "$TTY_OUTPUT"

# Protected branch check
is_protected_branch() {
  protected_branches=${PROTECTED_BRANCHES:-"main master"}
  for protected_branch in $protected_branches; do
    if [ "$branch" = "$protected_branch" ]; then
      return 0
    fi
  done
  return 1
}

# Push helper function
perform_push() {
  # Check if branch has upstream
  if ! git rev-parse --abbrev-ref "$branch@{upstream}" > /dev/null 2>&1; then
    echo "• Branch '$branch' has no upstream. Setting upstream to origin/$branch..." > "$TTY_OUTPUT"
    git push --set-upstream origin "$branch"
  else
    git push
  fi

  if [ $? -eq 0 ]; then
    echo "" > "$TTY_OUTPUT"
    echo "✓ Push complete" > "$TTY_OUTPUT"
  else
    echo "" > "$TTY_OUTPUT"
    echo "✗ Push failed" > "$TTY_OUTPUT"
    exit 1
  fi
}

# Push logic with upstream handling
attempt_push_prompt() {
  echo "" > "$TTY_OUTPUT"
  printf "▶ Do you want to push to '$branch' immediately after this commit? (Y/n): " > "$TTY_OUTPUT"
  read -r response < "$TTY_OUTPUT"
  if [ "$response" != "n" ] && [ "$response" != "N" ]; then
    echo "↑ Pushing to remote repository ($branch)..." > "$TTY_OUTPUT"
    perform_push
  else
    echo "⏭ Skipped push. You can push manually later." > "$TTY_OUTPUT"
  fi
}

# Interactive shell
if [ -t 0 ]; then
  if is_protected_branch; then
    echo "! Auto-push skipped on protected branch: $branch" > "$TTY_OUTPUT"
  else
    attempt_push_prompt
  fi
else
  echo "• Non-interactive shell detected" > "$TTY_OUTPUT"
  if [ -e "/dev/tty" ] && ! is_protected_branch; then
    echo "" > "$TTY_OUTPUT"
    printf "▶ Do you want to push to '$branch' immediately after this commit? (Y/n): " > "$TTY_OUTPUT"
    read -r response < "$TTY_OUTPUT"
    if [ "$response" != "n" ] && [ "$response" != "N" ]; then
      echo "↑ Pushing to remote repository ($branch)..." > "$TTY_OUTPUT"
      perform_push
    else
      echo "⏭ Skipped push. You can push manually later." > "$TTY_OUTPUT"
    fi
  else
    # Check for GIT_AUTO_PUSH first, regardless of protected branch status
    if [ "$GIT_AUTO_PUSH" = "1" ]; then
      if is_protected_branch; then
        echo "! WARNING: Auto-pushing to protected branch '$branch' due to GIT_AUTO_PUSH=1" > "$TTY_OUTPUT"
      fi
      echo "↑ Auto-pushing to remote repository ($branch) based on GIT_AUTO_PUSH environment variable..." > "$TTY_OUTPUT"
      perform_push
    elif [ -n "$GIT_AUTO_PUSH" ]; then
      echo "! Invalid value for GIT_AUTO_PUSH. Only '1' is allowed to enable auto-push." > "$TTY_OUTPUT"
    elif is_protected_branch; then
      echo "! Auto-push skipped on protected branch: $branch" > "$TTY_OUTPUT"
    elif [ -e "/dev/tty" ]; then
      echo "" > "$TTY_OUTPUT"
      printf "▶ Do you want to push to '$branch' immediately after this commit? (Y/n): " > "$TTY_OUTPUT"
      read -r response < "$TTY_OUTPUT"
      if [ "$response" != "n" ] && [ "$response" != "N" ]; then
        echo "↑ Pushing to remote repository ($branch)..." > "$TTY_OUTPUT"
        perform_push
      else
        echo "⏭ Skipped push. You can push manually later." > "$TTY_OUTPUT"
      fi
    else
      echo "! Non-interactive shell without /dev/tty detected. Skipping push prompt." > "$TTY_OUTPUT"
    fi
  fi
fi

# Final summary
echo "" > "$TTY_OUTPUT"
echo "════════════════════════════════════════" > "$TTY_OUTPUT"
echo "📋 COMMIT SUMMARY" > "$TTY_OUTPUT"
echo "────────────────────────────────────────" > "$TTY_OUTPUT"
echo "Branch: $branch" > "$TTY_OUTPUT"
echo "Commit: $commit_hash" > "$TTY_OUTPUT"
echo "Message: $commit_message" > "$TTY_OUTPUT"
echo "════════════════════════════════════════" > "$TTY_OUTPUT"

# Exit with success
exit 0
